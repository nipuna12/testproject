@page "/artist/{ArtistId:long}"
@attribute [Authorize]

@using Chinook.Models
@using Chinook.ClientModels
@using Chinook.Services.Interfaces
@using Microsoft.EntityFrameworkCore
@using System.Security.Claims;
@inject IPlaylistService _playlistService;
@inject IUnitOfWork _unitOfWork;

@if (!string.IsNullOrWhiteSpace(InfoMessage))
{
    <div class="alert alert-info fade show">
        <div class="d-flex align-items-start">
            <div class="flex-grow-1">
                @InfoMessage
            </div>
            <button type="button" class="btn-close" aria-label="Close" @onclick="CloseInfoMessage"></button>
        </div>
    </div>
}

@if (Artist == null)
{
    <Loading />
}
else
{
    <h1>@Artist.Name</h1>
    <table class="table table-striped table-hover table-sm">
        <thead>
            <tr>
                <th>Album title</th>
                <th>Track name</th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var track in Tracks)
            {
                <tr>
                    <td>@track.AlbumTitle</td>
                    <td>@track.TrackName</td>
                    <td>
                        @if (track.IsFavorite)
                        {
                            <a href="#" class="m-1" title="Unmark as favorite" @onclick="@(() => UnfavoriteTrack(track.TrackId))" @onclick:preventDefault><i class="bi bi-star-fill"></i></a>
                        }
                        else
                        {
                            <a href="#" class="m-1" title="Mark as favorite" @onclick="@(() => FavoriteTrack(track.TrackId))" @onclick:preventDefault><i class="bi bi-star"></i></a>
                        }
                        <a href="#" class="m-1" title="Add to playlist" @onclick="@(() => OpenPlaylistDialog(track.TrackId))" @onclick:preventDefault><i class="bi bi-file-earmark-plus"></i></a>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

<Modal @ref="PlaylistDialog">
    <Title>Add to playlist</Title>
    <Body>
        @if (SelectedTrack != null)
        {
            <div class="form-group mb-2">
                <label>@Artist.Name - @SelectedTrack.AlbumTitle - @SelectedTrack.TrackName</label>
            </div>
        }

        <div class="mb-2">
            <label for="ExistingPlaylist">Add to existing playlist</label>
            <select class="form-control" id="ExistingPlaylist" @bind="@SelectedPlaylistId">
                <option value="">Please select</option>
                @foreach (var playlist in UserPlaylists)
                {
                    <option value="@playlist.PlayListId">@playlist.Name</option>
                }
            </select>
        </div>
        <div class="mb-2">
            <label for="NewPlaylist">Create new playlist</label>
            <input type="text" id="NewPlaylist" class="form-control" placeholder="Name for the new playlist" @bind="NewPlaylistName">
        </div>
    </Body>
    <Footer>
        <button class="btn btn-success" @onclick="AddTrackToPlaylist">Save</button>
    </Footer>
</Modal>

@code {
    [Parameter] public long ArtistId { get; set; }
    [CascadingParameter] private Task<AuthenticationState> authenticationState { get; set; }
    [Inject] IDbContextFactory<ChinookContext> DbFactory { get; set; }

    private Modal PlaylistDialog { get; set; }

    private Artist Artist;
    private List<PlaylistTrack> Tracks;
    private DbContext DbContext;
    private PlaylistTrack SelectedTrack;
    private string InfoMessage;
    private string CurrentUserId;
    private List<ClientModels.Playlist> UserPlaylists = new List<ClientModels.Playlist>();
    private long SelectedPlaylistId { get; set; }
    private string NewPlaylistName { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await InvokeAsync(StateHasChanged);
        CurrentUserId = await GetUserId();
        var DbContext = await DbFactory.CreateDbContextAsync();

        Artist = DbContext.Artists.SingleOrDefault(a => a.ArtistId == ArtistId);

        Tracks = DbContext.Tracks.Where(a => a.Album.ArtistId == ArtistId)
            .Include(a => a.Album)
            .Select(t => new PlaylistTrack()
            {
                AlbumTitle = (t.Album == null ? "-" : t.Album.Title),
                TrackId = t.TrackId,
                TrackName = t.Name,
                IsFavorite = t.Playlists.Where(p => p.UserPlaylists.Any(up => up.UserId == CurrentUserId && up.Playlist.Name == "My favorite tracks")).Any()
            })
            .ToList();
    }

    private async Task<string> GetUserId()
    {
        var user = (await authenticationState).User;
        var userId = user.FindFirst(u => u.Type.Contains(ClaimTypes.NameIdentifier))?.Value;
        return userId;
    }

    private async void FavoriteTrack(long trackId)
    {
        var track = Tracks.FirstOrDefault(t => t.TrackId == trackId);

        var playlist = await _playlistService.GetPlaylistByNameAsync("My favorite tracks");
        if (playlist is null)
        {
            // Create the playlist if it doesn't exist
            playlist = await _playlistService.CreateNewPlayListAsync("My favorite tracks");
        }

        await _playlistService.CreateNewUserPlayListAsync(CurrentUserId, playlist.PlaylistId);

        // Add the track to the playlist using the association table
        await _playlistService.CreateNewPlaylistTrackAsync(playlist.PlaylistId, trackId);

        await _unitOfWork.GetDatabaseContext().SaveChangesAsync();

        Tracks = await _playlistService.GetPlaylistTracksByArtistAsync(ArtistId, CurrentUserId);

        InfoMessage = $"Track {track.ArtistName} - {track.AlbumTitle} - {track.TrackName} added to playlist Favorites.";
    }

    private async void UnfavoriteTrack(long trackId)
    {
        var track = Tracks.FirstOrDefault(t => t.TrackId == trackId);

        var playlist = await _playlistService.GetPlaylistByNameAsync("My favorite tracks");
        if (playlist is not null)
        {
            await _playlistService.DeletePlaylistTrackAsync(playlist.PlaylistId, trackId);
            await _unitOfWork.GetDatabaseContext().SaveChangesAsync();
        }

        Tracks = await _playlistService.GetPlaylistTracksByArtistAsync(ArtistId, CurrentUserId);

        InfoMessage = $"Track {track.ArtistName} - {track.AlbumTitle} - {track.TrackName} removed from playlist Favorites.";
    }

    private async void OpenPlaylistDialog(long trackId)
    {
        CloseInfoMessage();
        SelectedTrack = Tracks.FirstOrDefault(t => t.TrackId == trackId);
        UserPlaylists = await _playlistService.GetPlayListByUserIdAsync(CurrentUserId);
        PlaylistDialog.Open();
    }

    private async void AddTrackToPlaylist()
    {        
        // Get the selected playlist based on the dropdown value
        var playlistId = SelectedPlaylistId;

        Chinook.Models.Playlist playlist = null;

        if (playlistId == 0)
        {
            // If no playlist is selected, create a new one
            var newPlaylistName = NewPlaylistName?.Trim();

            if (string.IsNullOrWhiteSpace(newPlaylistName))
            {
                InfoMessage = "Please enter a valid name for the new playlist.";
                return;
            }

            var existingPlayList = await _playlistService.GetPlaylistByNameAsync(newPlaylistName);
            if (existingPlayList is not null)
            {
                InfoMessage = "Playlist name already exists. Please enter a different name.";
                return;                
            }

            playlist = await _playlistService.CreateNewPlayListAsync(newPlaylistName);
            await _playlistService.CreateNewUserPlayListAsync(CurrentUserId, playlist.PlaylistId);
        }
        else
        {
            // If an existing playlist is selected, fetch it from the database
            playlist = await _playlistService.GetPlaylistByIdAsync(playlistId);

            if (playlist == null)
            {
                InfoMessage = "Selected playlist not found.";
                return;
            }
        }

        // Add the track to the playlist using the association table
        await _playlistService.CreateNewPlaylistTrackAsync(playlist.PlaylistId, SelectedTrack.TrackId);

        await _unitOfWork.GetDatabaseContext().SaveChangesAsync();

        // Clear the new playlist name after adding the track
        NewPlaylistName = "";

        CloseInfoMessage();
        InfoMessage = $"Track {Artist.Name} - {SelectedTrack.AlbumTitle} - {SelectedTrack.TrackName} added to playlist {{playlist name}}.";
        PlaylistDialog.Close();
        UserPlaylists = await _playlistService.GetPlayListByUserIdAsync(CurrentUserId);
        Tracks = await _playlistService.GetPlaylistTracksByArtistAsync(ArtistId, CurrentUserId);
    }

    private void CloseInfoMessage()
    {
        InfoMessage = "";
    }
}
